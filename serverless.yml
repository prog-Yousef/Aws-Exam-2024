# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: almerosen
# "service" is the name of this project. This will also be added to your AWS resource names.
service: aws-Exam-2024

provider:
  name: aws
  runtime: nodejs20.x
  region: eu-north-1
  iam:
    role: arn:aws:iam::235494790392:role/lecture-role

build:
  esbuild:
    minify: true

package:
  individually: true

functions:
  CreateRoom:
    handler: functions/CreateRoom/index.handler
    events:
      - httpApi:
          path: /rooms
          method: post

  CreateBooking:
    handler: functions/CreateBooking/index.handler
    events:
      - httpApi:
          path: /booking
          method: post

  GetSpecBooking:
    handler: functions/GetSpecBooking/index.handler
    events:
      - httpApi:
          path: /booking/{id}
          method: get

  GetAllBooking:
    handler: functions/GetAllBooking/index.handler
    events:
      - httpApi:
          path: /booking
          method: get

  UpdateBooking:
    handler: functions/UpdateBooking/index.handler
    events:
      - httpApi:
          path: /booking/{id}
          method: put

resources:
  Resources:
    Bookings:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: bookings
        AttributeDefinitions:
          - AttributeName: bookingId
            AttributeType: S
          - AttributeName: checkInDate
            AttributeType: S
        KeySchema:
          - AttributeName: bookingId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: CheckInDateIndex
            KeySchema:
              - AttributeName: checkInDate
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    Rooms:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: rooms
        AttributeDefinitions:
          - AttributeName: roomType
            AttributeType: S
        KeySchema:
          - AttributeName: roomType
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
# Exempel på rooms data:
# [
#   { "roomType": "single", "guestsAllowed": 1, "price": 500, availableRooms: 8 },
#   { "roomType": "double", "guestsAllowed": 2, "price": 1000, availableRooms: 8 },
#   { "roomType": "suite", "guestsAllowed": 3, "price": 1500, availableRooms: 4 }
# ]
# Vi behöver inte söka efter individuella rum ( behövs inte roomId ) utan bara rumstyper
# checkInDate som GSI - om man vill sortera alla bokningar efter datum

